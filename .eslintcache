[{"/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/reportWebVitals.js":"1","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/main/Map.js":"2","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/index.js":"3","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/main/SearchBox.js":"4","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/App.js":"5","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/main/MainPage.js":"6","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/dogs/DogsIndex.js":"7"},{"size":362,"mtime":1606448402817,"results":"8","hashOfConfig":"9"},{"size":5440,"mtime":1606894640675,"results":"10","hashOfConfig":"9"},{"size":584,"mtime":1606809212364,"results":"11","hashOfConfig":"9"},{"size":978,"mtime":1606696854883,"results":"12","hashOfConfig":"9"},{"size":457,"mtime":1606899850314,"results":"13","hashOfConfig":"9"},{"size":243,"mtime":1606729917877,"results":"14","hashOfConfig":"9"},{"size":3278,"mtime":1606895504175,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hde5a1",{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/reportWebVitals.js",[],"/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/main/Map.js",["32","33","34","35","36"],"import React, { Component } from 'react';\nimport {Map, Marker, GoogleApiWrapper, Listing} from 'google-maps-react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport $ from \"jquery\";\n\n\nlet parkMapper;\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // for google map places autocomplete\n      address: '',\n\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      placesService: {},\n      markers: [],\n      parkDetails: [],\n\n      mapCenter: {\n        lat: 49.2827291,\n        lng: -123.1207375\n      }\n    };\n    this.fetchPlaces = this.fetchPlaces.bind(this)\n    this.onMouseoverMarker = this.onMouseoverMarker.bind(this)\n  }\n\n  handleChange = address => {\n    this.setState({markers: []})\n    this.setState({ address });\n    console.log(\"handlChange\", address)\n\n  };\n\n  handleSelect = address => {\n    console.log(address)\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        console.log('Success', latLng);\n\n        // update center state\n        this.setState({ mapCenter: latLng });\n      })\n      .catch(error => console.error('Error', error));\n\n      const placesRequest = {\n        type: ['park'],\n        query: 'dog park',\n      };\n\n      let imgUrlString;\n      this.state.placesService.textSearch(placesRequest, ((response) => {\n          console.log(\"response\", response[2].rating)\n        response.map((p) =>{\n        if (p.photos) {\n          let imgUrlString = p.photos[0].getUrl()\n        } else {\n          let imgUrlString = ''\n        }\n        this.state.markers.push({place_id: p.place_id, name: p.name, lng: p.geometry.location.lng(), lat: p.geometry.location.lat(), address: p.formatted_address, rating: p.rating, reviews: p.reviews, imgUrl: imgUrlString})}\n        // console.log(\"lng\", p.geometry.viewport.Sa.i, \"lat\", p.geometry.viewport.Ya.i)\n      )\n        console.log(\"markers\", this.state.markers)\n\n      }))\n\n  };\n\n  // this.state.markers.push({name: p.name, lng: p.geometry.location.Scopes[0].a, lat: p.geometry.location.Scopes[0].b})\n\n  fetchPlaces(mapProps, map) {\n    console.log(\"fetchPlaces\", mapProps)\n    const {google} = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n    this.setState({placesService: service})\n}\n\nonMouseoverMarker(props, marker, e) {\n  $('.park-details').empty()\n  $('.park-details').append('<div id=\"parkCard\"></div>')\n  $('#parkCard').css({'z-index': '99', 'position': 'absolute'})\n  let parkName = (`<p>Name: ${props.name} Address: ${props.address} Rating: ${props.rating}</p>`)\n  $('#parkCard').css({'border': '1px solid black', 'height': '20vh', 'width': '20vh'})\n  let parkImage = (`<img href=${props.imgUrl}>`)\n  $('#parkCard').append(parkName)\n  $('#parkCard').append(parkImage)\n}\n  render() {\n    return (\n      <div id='googleMaps'>\n        <PlacesAutocomplete\n          value={this.state.address}\n          onChange={this.handleChange}\n          onSelect={this.handleSelect}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Search Places ...',\n                  className: 'location-search-input',\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map(suggestion => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n\n        <Map\n          google={this.props.google}\n          initialCenter={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n          center={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n          onReady={this.fetchPlaces}\n\n        >\n        {this.state.markers.map((park) =>\n          <Marker\n            key={park.place_id}\n            name={park.name}\n            rating={park.rating}\n            address={park.address}\n            onMouseover={this.onMouseoverMarker}\n            position={{\n              lat: park.lat,\n              lng: park.lng\n            }} />\n\n        )}\n        <Marker\n          position={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }} />\n        </Map>\n        <div className=\"park-details\">\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_API_KEY\n})(MapContainer)\n","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/index.js",[],"/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/main/SearchBox.js",["37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleMapReact from 'google-map-react';\nimport PropTypes from 'prop-types';\n\n\nconst google = window.google;\n\n\n\nclass SearchBox extends React.Component {\n  static propTypes = {\n    placeholder: PropTypes.string,\n    onPlacesChanged: PropTypes.func\n  }\n  render() {\n    return <input ref=\"input\" {...this.props} type=\"text\"/>;\n  }\n  onPlacesChanged = () => {\n    if (this.props.onPlacesChanged) {\n      this.props.onPlacesChanged(this.searchBox.getPlaces());\n    }\n  }\n\n  componentDidMount() {\n    var input = ReactDOM.findDOMNode(this.refs.input);\n    if (google) {\n     this.searchBox = new google.map.places.SearchBox(input);\n     this.searchBox.addListener('places_changed', this.onPlacesChanged);}\n  }\n  componentWillUnmount() {\n    // https://developers.google.com/maps/documentation/javascript/events#removing\n    google.maps.event.clearInstanceListeners(this.searchBox);\n  }}\n\n\nexport default SearchBox;\n","/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/App.js",["38","39"],"/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/main/MainPage.js",["40"],"/Users/brittanycrocker/Projects/dogpark/dogpark-client/src/components/dogs/DogsIndex.js",["41","42"],{"ruleId":"43","severity":1,"message":"44","line":2,"column":40,"nodeType":"45","messageId":"46","endLine":2,"endColumn":47},{"ruleId":"43","severity":1,"message":"47","line":10,"column":5,"nodeType":"45","messageId":"46","endLine":10,"endColumn":15},{"ruleId":"48","severity":1,"message":"49","line":62,"column":26,"nodeType":"50","messageId":"51","endLine":62,"endColumn":28},{"ruleId":"43","severity":1,"message":"52","line":64,"column":15,"nodeType":"45","messageId":"46","endLine":64,"endColumn":27},{"ruleId":"43","severity":1,"message":"52","line":66,"column":15,"nodeType":"45","messageId":"46","endLine":66,"endColumn":27},{"ruleId":"43","severity":1,"message":"53","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":22},{"ruleId":"43","severity":1,"message":"54","line":3,"column":20,"nodeType":"45","messageId":"46","endLine":3,"endColumn":26},{"ruleId":"43","severity":1,"message":"55","line":6,"column":3,"nodeType":"45","messageId":"46","endLine":6,"endColumn":7},{"ruleId":"43","severity":1,"message":"56","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":17},{"ruleId":"43","severity":1,"message":"57","line":5,"column":7,"nodeType":"45","messageId":"46","endLine":5,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":122,"column":9,"nodeType":"60","endLine":122,"endColumn":27},"no-unused-vars","'Listing' is defined but never used.","Identifier","unusedVar","'parkMapper' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'imgUrlString' is assigned a value but never used.","'GoogleMapReact' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'SearchBox' is defined but never used.","'SERVER_URL_POST' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]